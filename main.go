package main

import (
	"database/sql"
	"fmt"
	"io"
	"log"
	"net"
	"os"
	"strconv"
	"sync"
	"time"

	_ "github.com/go-sql-driver/mysql"
	"gopkg.in/yaml.v2"
)

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
type Config struct {
	Database struct {
		User     string `yaml:"user"`
		Password string `yaml:"password"`
		Host     string `yaml:"host"`
		Port     int    `yaml:"port"`
		DBName   string `yaml:"dbname"`
	} `yaml:"database"`
}

type Route struct {
	TargetIP   string
	TargetPort int
	Protocol   string // "tcp", "udp", or "both"
}

var (
	db           *sql.DB
	routes       = make(map[int]Route)
	listeners    = make(map[int]net.Listener)
	udpListeners = make(map[int]*net.UDPConn)
	activeLock   sync.Mutex
	config       Config
)

func loadConfig() error {
	// –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏ —á–∏—Ç–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª
	file, err := os.Open("config.yaml")
	if err != nil {
		return fmt.Errorf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: %v", err)
	}
	defer file.Close()

	// –î–µ–∫–æ–¥–∏—Ä—É–µ–º YAML –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É config
	decoder := yaml.NewDecoder(file)
	err = decoder.Decode(&config)
	if err != nil {
		return fmt.Errorf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: %v", err)
	}
	return nil
}

func loadRoutes() (map[int]Route, error) {
	rows, err := db.Query("SELECT listen_port, target_ip, target_port, protocol FROM routes")
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	newRoutes := make(map[int]Route)
	for rows.Next() {
		var port int
		var ip string
		var tport int
		var protocol string
		if err := rows.Scan(&port, &ip, &tport, &protocol); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏: %v", err)
			continue
		}
		newRoutes[port] = Route{TargetIP: ip, TargetPort: tport, Protocol: protocol}
	}
	return newRoutes, nil
}

func startTCPListener(port int, route Route) {
	ln, err := net.Listen("tcp", ":"+strconv.Itoa(port))
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ TCP-–ø–æ—Ä—Ç–∞ %d: %v", port, err)
		return
	}

	activeLock.Lock()
	listeners[port] = ln
	activeLock.Unlock()

	log.Printf("‚úÖ –°–ª—É—à–∞—é TCP –Ω–∞ –ø–æ—Ä—Ç—É %d ‚Üí %s:%d", port, route.TargetIP, route.TargetPort)

	for {
		conn, err := ln.Accept()
		if err != nil {
			log.Printf("‚õîÔ∏è –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–∞ TCP –ø–æ—Ä—Ç—É %d: %v", port, err)
			break
		}
		go handleTCPConnection(conn, route)
	}
	log.Printf("‚õîÔ∏è –ü—Ä–æ—Å–ª—É—à–∫–∞ TCP –Ω–∞ –ø–æ—Ä—Ç—É %d –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞", port)
}

func startUDPListener(port int, route Route) {
	addr := net.UDPAddr{
		Port: port,
		IP:   net.ParseIP("0.0.0.0"),
	}

	conn, err := net.ListenUDP("udp", &addr)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ UDP-–ø–æ—Ä—Ç–∞ %d: %v", port, err)
		return
	}

	activeLock.Lock()
	udpListeners[port] = conn
	activeLock.Unlock()

	log.Printf("‚úÖ –°–ª—É—à–∞—é UDP –Ω–∞ –ø–æ—Ä—Ç—É %d ‚Üí %s:%d", port, route.TargetIP, route.TargetPort)

	buf := make([]byte, 1024)
	for {
		n, addr, err := conn.ReadFromUDP(buf)
		if err != nil {
			log.Printf("‚õîÔ∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å UDP –ø–æ—Ä—Ç–∞ %d: %v", port, err)
			break
		}

		go handleUDPConnection(conn, buf[:n], addr, route)
	}
	log.Printf("‚õîÔ∏è –ü—Ä–æ—Å–ª—É—à–∫–∞ UDP –Ω–∞ –ø–æ—Ä—Ç—É %d –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞", port)
}

func stopTCPListener(port int) {
	activeLock.Lock()
	defer activeLock.Unlock()

	if ln, ok := listeners[port]; ok {
		ln.Close()
		delete(listeners, port)
		log.Printf("üõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω TCP –ø–æ—Ä—Ç %d", port)
	}
}

func stopUDPListener(port int) {
	activeLock.Lock()
	defer activeLock.Unlock()

	if conn, ok := udpListeners[port]; ok {
		conn.Close()
		delete(udpListeners, port)
		log.Printf("üõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω UDP –ø–æ—Ä—Ç %d", port)
	}
}

func handleTCPConnection(conn net.Conn, route Route) {
	defer conn.Close()

	targetAddr := fmt.Sprintf("%s:%d", route.TargetIP, route.TargetPort)
	targetConn, err := net.Dial("tcp", targetAddr)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ %s: %v", targetAddr, err)
		return
	}
	defer targetConn.Close()

	go io.Copy(targetConn, conn)
	io.Copy(conn, targetConn)
}

func handleUDPConnection(conn *net.UDPConn, data []byte, addr *net.UDPAddr, route Route) {
	targetAddr := fmt.Sprintf("%s:%d", route.TargetIP, route.TargetPort)
	remoteAddr, err := net.ResolveUDPAddr("udp", targetAddr)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –¥–ª—è UDP: %v", err)
		return
	}

	_, err = conn.WriteToUDP(data, remoteAddr)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ %s: %v", targetAddr, err)
	}
}

func syncRoutes() {
	newRoutes, err := loadRoutes()
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤: %v", err)
		return
	}

	activeLock.Lock()
	defer activeLock.Unlock()

	// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–æ—Ä—Ç—ã
	for port, route := range newRoutes {
		if _, exists := listeners[port]; !exists && (route.Protocol == "tcp" || route.Protocol == "both") {
			routes[port] = route
			go startTCPListener(port, route)
		}
		if _, exists := udpListeners[port]; !exists && (route.Protocol == "udp" || route.Protocol == "both") {
			routes[port] = route
			go startUDPListener(port, route)
		}
	}

	// –£–¥–∞–ª—è–µ–º —É–¥–∞–ª—ë–Ω–Ω—ã–µ –ø–æ—Ä—Ç—ã
	for port := range listeners {
		if _, exists := newRoutes[port]; !exists {
			stopTCPListener(port)
			delete(routes, port)
		}
	}
	for port := range udpListeners {
		if _, exists := newRoutes[port]; !exists {
			stopUDPListener(port)
			delete(routes, port)
		}
	}
}

func main() {
	// –ß—Ç–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞
	err := loadConfig()
	if err != nil {
		log.Fatal(err)
	}

	// –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	connStr := fmt.Sprintf("%s:%s@tcp(%s:%d)/%s",
		config.Database.User,
		config.Database.Password,
		config.Database.Host,
		config.Database.Port,
		config.Database.DBName,
	)

	var errConnecting error
	db, errConnecting = sql.Open("mysql", connStr)
	if errConnecting != nil {
		log.Fatal("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:", errConnecting)
	}
	defer db.Close()

	// –ü–µ—Ä–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
	syncRoutes()

	// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
	ticker := time.NewTicker(10 * time.Second)
	for range ticker.C {
		syncRoutes()
	}
}
